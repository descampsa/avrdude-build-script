--- avr.c
+++ avr.c
@@ -1058,6 +1058,36 @@ int avr_signature(PROGRAMMER * pgm, AVRPART * p)
   return 0;
 }
 
+uint8_t get_fuse_bitmask(AVRMEM * m) {
+  uint8_t bitmask_r = 0;
+  uint8_t bitmask_w = 0;
+  int i, j;
+
+  if (m->size > 1) {
+    // not a fuse, compare bytes directly
+    return 0xFF;
+  }
+
+  for (i=0; i<AVR_OP_MAX; i++) {
+    if (m->op[i] && i == AVR_OP_READ) {
+      for (j=7; j>=0; j--) {
+        bitmask_r |= (m->op[i]->bit[j].type != AVR_CMDBIT_IGNORE) << j;
+      }
+    }
+    if (m->op[i] && i == AVR_OP_WRITE) {
+      for (j=7; j>=0; j--) {
+        bitmask_w |= (m->op[i]->bit[j].type != AVR_CMDBIT_VALUE  &&
+          m->op[i]->bit[j].type != AVR_CMDBIT_IGNORE) << j;
+      }
+    }
+  }
+  return bitmask_r & bitmask_w;
+}
+
+int compare_memory_masked(AVRMEM * m, unsigned char buf1, unsigned char buf2) {
+  uint8_t bitmask = get_fuse_bitmask(m);
+  return ((buf1 & bitmask) != (buf2 & bitmask));
+}
 
 /*
  * Verify the memory buffer of p with that of v.  The byte range of v,
@@ -1103,7 +1133,7 @@ int avr_verify(AVRPART * p, AVRPART * v, char * memtype, int size)
 
   for (i=0; i<size; i++) {
     if ((b->tags[i] & TAG_ALLOCATED) != 0 &&
-        buf1[i] != buf2[i]) {
+        compare_memory_masked(a , buf1[i], buf2[i])) {
       avrdude_message(MSG_INFO, "%s: verification error, first mismatch at byte 0x%04x\n"
                       "%s0x%02x != 0x%02x\n",
                       progname, i,
--- libavrdude.h
+++ libavrdude.h
@@ -337,6 +337,9 @@ typedef void (*walk_avrparts_cb)(const char *name, const char *desc,
                                  void *cookie);
 void walk_avrparts(LISTID avrparts, walk_avrparts_cb cb, void *cookie);
 void sort_avrparts(LISTID avrparts);
+
+uint8_t get_fuse_bitmask(AVRMEM * m);
+
 #ifdef __cplusplus
 }
 #endif
--- main.c
+++ main.c
@@ -1239,6 +1239,7 @@ int main(int argc, char * argv [])
     unsigned char safemodeafter_lfuse = 0xff;
     unsigned char safemodeafter_hfuse = 0xff;
     unsigned char safemodeafter_efuse = 0xff;
+    unsigned char safemodeafter_efuse_mask = 0xff;
     unsigned char safemodeafter_fuse  = 0xff;
     unsigned char failures = 0;
     char yes[1] = {'y'};
@@ -1345,8 +1346,15 @@ int main(int argc, char * argv [])
       }
     }
 
+    /* Get efuse bitmask if it exists */
+    AVRMEM * m;
+    m = avr_locate_mem(p, "efuse");
+    if (m != NULL) {
+      safemodeafter_efuse_mask = get_fuse_bitmask(m);
+    }
+
     /* Now check what fuses are against what they should be */
-    if (safemodeafter_efuse != safemode_efuse) {
+    if ((safemodeafter_efuse & safemodeafter_efuse_mask) != (safemode_efuse & safemodeafter_efuse_mask)) {
       fuses_updated = 1;
       avrdude_message(MSG_INFO, "%s: safemode: efuse changed! Was %x, and is now %x\n",
               progname, safemode_efuse, safemodeafter_efuse);

